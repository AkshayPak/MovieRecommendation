# -*- coding: utf-8 -*-
"""Project 18. Movie Recommendation System using Machine Learning with Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rXW-cwCVDHmuhEmRGw047yjkn_KVWPxE

Importing the dependencies
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data Collection and Pre-Processing"""

# loading the data from the csv file to apandas dataframe
movies_data = pd.read_csv('movies.csv')

# printing the first 5 rows of the dataframe
# movies_data.head()

# number of rows and columns in the data frame

# movies_data.shape

# selecting the relevant features for recommendation

selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']
# print(selected_features)

# replacing the null valuess with null string

for feature in selected_features:
    movies_data[feature] = movies_data[feature].fillna('')

# combining all the 5 selected features

combined_features = movies_data['genres'] + ' ' + movies_data['keywords'] + ' ' + movies_data['tagline'] + ' ' + \
                    movies_data['cast'] + ' ' + movies_data['director']

# print(combined_features)

# converting the text data to feature vectors

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

# print(feature_vectors)

"""Cosine Similarity"""

# getting the similarity scores using cosine similarity

similarity = cosine_similarity(feature_vectors)

# print(similarity)

# print(similarity.shape)

"""Getting the movie name from the user"""

# getting the movie name from the user



# creating a list with all the movie names given in the dataset

list_of_all_titles = movies_data['title'].tolist()
# print(list_of_all_titles)

# finding the close match for the movie name given by the user

find_close_match = difflib.get_close_matches(movies_name, list_of_all_titles)
# print(find_close_match)

close_match = find_close_match[0]
# print(close_match)

# finding the index of the movie with title

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
# print(index_of_the_movie)

# getting a list of similar movies

similarity_score = list(enumerate(similarity[index_of_the_movie]))
# print(similarity_score)

len(similarity_score)

# sorting the movies based on their similarity score

sorted_similar_movies = sorted(similarity_score, key=lambda x: x[1], reverse=True)
# spiprint(sorted_similar_movies)

# print the name of similar movies based on the index



i = 1
lmao = 'Movies suggested for you : \n'
for movie in sorted_similar_movies:
    index = movie[0]
    title_from_index = movies_data[movies_data.index == index]['title'].values[0]
    if (i < 30):
        lmao = lmao + str(i) + "." + title_from_index + "\n"
        i += 1



def helloCallBack():
    tkinter.messagebox.showinfo( "Movie Recommendations", lmao)
B.pack()
top.mainloop()

import tkinter
import tkinter.messagebox

from tkinter import *
master = Tk()
Label(master, text='Enter your favourite movie name : ').grid(row=0)
movie_name = Entry(master)
movie_name.grid(row=0, column=1)
top = tkinter.Tk()
B = tkinter.Button(top, text ="Click for the recommendations ma Mahn", width =100, command = helloCallBack)
mainloop()

"""Movie Recommendation Sytem"""
#
# movie_name = input(' Enter your favourite movie name : ')
#
# list_of_all_titles = movies_data['title'].tolist()
#
# find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
#
# close_match = find_close_match[0]
#
# index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
#
# similarity_score = list(enumerate(similarity[index_of_the_movie]))
#
# sorted_similar_movies = sorted(similarity_score, key=lambda x: x[1], reverse=True)
#
# print('Movies suggested for you : \n')
#
# i = 1
# lol = ''
# for movie in sorted_similar_movies:
#     index = movie[0]
#     title_from_index = movies_data[movies_data.index == index]['title'].values[0]
#     if i < 30:
#         lol = lol + str(i) + "." + title_from_index + "\n"
#         i += 1
#
# print(lol)